///
/// \copyright Copyright Â© 2017 ActiveVideo, Inc. and/or its affiliates.
/// Reproduction in whole or in part without written permission is prohibited.
/// All rights reserved. U.S. Patents listed at http://www.activevideo.com/patents
///

#pragma once

#include <vector>
#include <utility>

#include <assert.h>
#include <stddef.h>
#include <sys/types.h>

namespace std {

template<typename KEYTYPE> class set
{
public:
    typedef std::vector<KEYTYPE> Vector;
    typedef typename std::vector<KEYTYPE>::iterator VectorIterator;

    class SetIterator
    {
    public:
        SetIterator() :
            m_node(0)
        {
        }

        SetIterator(const SetIterator &rhs) :
            m_node(rhs.m_node)
        {
        }

        SetIterator(KEYTYPE **node) :
            m_node(node)
        {
        }

        SetIterator(const KEYTYPE *node) :
            m_node(const_cast<KEYTYPE *>(node))
        {
        }

        SetIterator &operator=(const SetIterator &rhs)
        {
            this->m_node = rhs.m_node;

            return *this;
        }

        bool operator==(const SetIterator &rhs) const
        {
            return m_node == rhs.m_node;
        }

        bool operator!=(const SetIterator &rhs) const
        {
            return !(*this == rhs);
        }

        operator VectorIterator()
        {
            return static_cast<VectorIterator>(m_node);
        }

        KEYTYPE *operator->()
        {
            return m_node;
        }

        const KEYTYPE *operator->() const
        {
            return m_node;
        }

        KEYTYPE &operator*()
        {
            return *m_node;
        }

        const KEYTYPE &operator*() const
        {
            return *m_node;
        }

        SetIterator &operator++()
        {
            ++m_node;
            return *this;
        }

        SetIterator &operator--()
        {
            --m_node;
            return *this;
        }

    private:
        KEYTYPE *m_node;
    };

    typedef SetIterator iterator;

    // This cannot be declare as "typedef const SetIterator const_iterator"
    // because we wouldn't have access to the increment operator (for example).
    // The elegant solution would be to declare a separate class (e.g.
    // SetConstIterator) for it.
    typedef SetIterator const_iterator;

    set()
    {
    }

    set(const set &rhs)
    {
        *this = rhs;
    }

    ~set()
    {
        clear();
    }

    set &operator=(const set &rhs)
    {
        if (this != &rhs) {
            clear();

            const_iterator it = rhs.begin();

            while (it != rhs.end()) {
                m_internal_vector.push_back(*it);
                ++it;
            }
        }

        return *this;
    }

    iterator find(const KEYTYPE &key)
    {
        return begin() + binary_search(key, 0, m_internal_vector.size() - 1);
    }

    const_iterator find(const KEYTYPE &key) const
    {
        return begin() + binary_search(key, 0, m_internal_vector.size() - 1);
    }

    iterator begin()
    {
        return &m_internal_vector[0];
    }

    const_iterator begin() const
    {
        return &m_internal_vector[0];
    }

    iterator end()
    {
        return begin() + m_internal_vector.size();
    }

    const_iterator end() const
    {
        return begin() + m_internal_vector.size();
    }

    void insert(const KEYTYPE &key) // TODO: May need to return std::pair<iterator, bool> one time...
    {
        ssize_t pivot = 0;
        size_t pos = binary_search(key, 0, static_cast<ssize_t>(m_internal_vector.size()) - 1, pivot);

        if (pos == m_internal_vector.size()) {
            m_internal_vector.insert(m_internal_vector.begin() + pivot, key);
            pos = pivot;
        }

        //return &m_internal_vector[pos];
    }

    void erase(iterator it)
    {
        assert(it != end());

        m_internal_vector.erase(it);
    }

    size_t erase(const KEYTYPE &key)
    {
        iterator it = find(key);

        if (it != end()) {
            erase(it);
            return 1;
        } else {
            return 0;
        }
    }

    void clear()
    {
        m_internal_vector.clear();
    }

    size_t size() const
    {
        return m_internal_vector.size();
    }

    bool empty() const
    {
        return m_internal_vector.size() == 0;
    }

private:
    // Returns the position of "key" between [begin, end]. The argument "middle" points to
    // the location where the element should be inserted in case it could not be found.
    //
    // It returns m_internal_vector.size() if is not found.
    // "begin" and "end" can be negative values.
    size_t binary_search(const KEYTYPE &key, ssize_t begin, ssize_t end, ssize_t &middle /*out*/) const
    {
        if (begin > end) {
            return m_internal_vector.size();
        } else {
            middle = (ssize_t)((end - begin) / 2) + begin;

            if (key < m_internal_vector[middle]) {
                return binary_search(key, begin, middle - 1, middle);
            } else if (m_internal_vector[middle] < key) {
                ++middle;
                return binary_search(key, middle, end, middle);
            } else { // key == m_internal_vector[middle]->first
                return middle;
            }
        }
    }

    inline size_t binary_search(const KEYTYPE &key, ssize_t begin, ssize_t end) const
    {
        ssize_t middle = 0;
        return binary_search(key, begin, end, middle);
    }

    Vector m_internal_vector;
};
}
